;;;; srfi-86.lisp

;;#t -> :true
;;#f -> :false

(in-package "https://github.com/g000001/srfi-86#internals")

(declaim (declaration line))

;;; mu & nu
(define-syntax mu
  (syntax-rules ()
    ((mu argument ***)
     (with ((f (gensym)))
       (lambda (f)
         (declare (line 15))
         (multiple-value-call f argument ***))))))

(define-syntax nu
  (syntax-rules ()
    ((nu argument ***)
     (with ((f (gensym)))
       (lambda (f)
         (declare (line 21))
         (multiple-value-call #'apply f argument ***))))))

;;; alet
(define-syntax alet
  (syntax-rules ()
    ((alet (bn ***) bd ***)
     (%alet () () (bn ***) bd ***))
    ((alet var (bn ***) bd ***)
     (%alet (var) () (bn ***) bd ***))))

(define-syntax %alet
  (syntax-rules (opt cat key rec and values :true :false)
    ((%alet () ((n v) ***) () bd ***)
     ((lambda (n ***) (declare (line 34)) bd ***) v ***))
    ((%alet (var) ((n v) ***) () bd ***)
     (funcall (letrec ((var (lambda (n ***) bd ***)))
                var) v ***))
    ((%alet (var (p ***) (nv ***) (bn ***)) ((n v) ***) () bd ***)
     (with ((t (gensym)))
       (funcall (letrec ((t (lambda (v ***)
                              (%alet (p ***) (nv *** (n v) *** (var t))
                                     (bn ***) bd ***))))
                  t) v ***)))
    ((%alet (p ***) (nv ***) ((() a b ***) bn ***) bd ***)
     ((lambda () (declare (line 51))a b *** (%alet (p ***) (nv ***) (bn ***) bd ***))))
    ((%alet (p ***) (nv ***) (((a) c) bn ***) bd ***)
     (with ((t (gensym)))
       ((lambda (t)(declare (line 54)) (%alet (p ***) (nv *** (a t)) (bn ***) bd ***)) c)))

    ((%alet (p ***) (nv ***) (((values a) c) bn ***) bd ***)
     (with ((t (gensym)))
       ((lambda (t)(declare (line 58)) (%alet (p ***) (nv *** (a t)) (bn ***) bd ***)) c)))
    ((%alet (p ***) (nv ***) (((values . b) c d ***) bn ***) bd ***)
     (%alet "dot" (p ***) (nv ***) (values) (b c d ***) (bn ***) bd ***))
    ((%alet "dot" (p ***) (nv ***) (values t ***) ((a . b) c ***)
	    (bn ***) bd ***)
     (with ((tn (gensym)))
       (%alet "dot" (p ***) (nv *** (a tn)) (values t *** tn) (b c ***)
              (bn ***) bd ***)))
    ((%alet "dot" (p ***) (nv ***) (values t ***) (() c) (bn ***) bd ***)
     (call-with-values (lambda () (declare (line 66)) c)
                       (lambda (t ***) (declare (line 67))
                               (%alet (p ***) (nv ***) (bn ***) bd ***))))
    ((%alet "dot" (p ***) (nv ***) (values t ***) (() c ***) (bn ***) bd ***)
     ((lambda (t ***) (%alet (p ***) (nv ***) (bn ***) bd ***)) c ***))
    ((%alet "dot" (p ***) (nv ***) (values t ***) (b c) (bn ***) bd ***)
     (with ((tn (gensym)))
       (call-with-values (lambda ()(declare (line 71)) c)
                         (lambda (t *** &rest tn)
                           (declare (line 72))
                           (%alet (p ***) (nv *** (b tn)) (bn ***) bd ***)))))
    ((%alet "dot" (p ***) (nv ***) (values t ***) (b c ***) (bn ***) bd ***)
     (with ((tn (gensym)))
       ((lambda (t *** &rest tn) (declare (line 76))
                (%alet (p ***) (nv *** (b tn)) (bn ***) bd ***)) c ***)))

    ((%alet (p ***) (nv ***) (((a . b) c d ***) bn ***) bd ***)
     (with ((t (gensym)))
       (%alet "dot" (p ***) (nv *** (a t)) (t) (b c d ***) (bn ***) bd ***)))
    ((%alet "dot" (p ***) (nv ***) (t ***) ((a . b) c ***) (bn ***) bd ***)
     (with ((tn (gensym)))
       (%alet "dot" (p ***) (nv *** (a tn)) (t *** tn) (b c ***) (bn ***)
              bd ***)))
    ((%alet "dot" (p ***) (nv ***) (t ***) (() c) (bn ***) bd ***)
     (funcall c (lambda (t ***)
                  (declare (line 87))
                  (%alet (p ***) (nv ***) (bn ***) bd ***))))
    ((%alet "dot" (p ***) (nv ***) (t ***) (() c ***) (bn ***) bd ***)
     ((lambda (t ***)
        (declare (line 89))
        (%alet (p ***) (nv ***) (bn ***) bd ***)) c ***))
    ((%alet "dot" (p ***) (nv ***) (t ***) (b c) (bn ***) bd ***)
     (with ((tn (gensym)))
       (funcall c (lambda (t *** &rest tn)(declare (line 92))
                          (%alet (p ***) (nv *** (b tn)) (bn ***) bd ***)))))
    ((%alet "dot" (p ***) (nv ***) (t ***) (b c ***) (bn ***) bd ***)
     (with ((tn (gensym)))
       ((lambda (t *** &rest tn) (declare (line 96))
                (%alet (p ***) (nv *** (b tn)) (bn ***) bd ***)) c ***)))

    ((%alet (p ***) (nv ***) ((and (n1 v1 t1 ***) (n2 v2 t2 ***) ***) bn ***)
	    bd ***)
     (%alet "and" (p ***) (nv ***) ((n1 v1 t1 ***) (n2 v2 t2 ***) ***) (bn ***)
	    bd ***))
    ((%alet "and" (p ***) (nv ***) ((n v) nvt ***) (bn ***) bd ***)
     (with ((t (gensym)))
       (let ((t v))(declare (line 105))
            (and t (%alet "and" (p ***) (nv *** (n t)) (nvt ***) (bn ***) bd ***)))))
    ((%alet "and" (p ***) (nv ***) ((n v t) nvt ***) (bn ***) bd ***)
     (with ((tt (gensym)))
       (let ((tt v))(declare (line 109))
            (and (let ((n tt)) t)
                 (%alet "and" (p ***) (nv *** (n tt)) (nvt ***) (bn ***) bd ***)))))
    ((%alet "and" (p ***) (nv ***) () (bn ***) bd ***)
     (%alet (p ***) (nv ***) (bn ***) bd ***))
    ((%alet (p ***) (nv ***) ((opt z a . e) bn ***) bd ***)
     (%alet "opt" (p ***) (nv ***) z (a . e) (bn ***) bd ***))
    ((%alet "opt" (p ***) (nv ***) z ((n d t ***)) (bn ***) bd ***)
     (with ((x (gensym)))
       (let ((x (if (null? z)
                    d
                    (if (null? (cdr z))
                        (wow-opt n (car z) t ***)
                        (error "alet: too many arguments" (cdr z))))))(declare (line 122))
                        (%alet (p ***) (nv *** (n x)) (bn ***) bd ***))))
    ((%alet "opt" (p ***) (nv ***) z ((n d t ***) . e) (bn ***) bd ***)
     (let ((y (if (null? z) z (cdr z)))
	   (x (if (null? z)
		  d
		  (wow-opt n (car z) t ***))))(declare (line 128))
                  (%alet "opt" (p ***) (nv *** (n x)) y e (bn ***) bd ***)))
    ((%alet "opt" (p ***) (nv ***) z e (bn ***) bd ***)
     (let ((te z))(declare (line 131))
          (%alet (p ***) (nv *** (e te)) (bn ***) bd ***)))
    ((%alet (p ***) (nv ***) ((cat z a . e) bn ***) bd ***)
     (with ((y (gensym)))
       (let ((y z))
         (declare (line 134))
         (%alet "cat" (p ***) (nv ***) y (a . e) (bn ***) bd ***))))
    ((%alet "cat" (p ***) (nv ***) z ((n d t ***)) (bn ***) bd ***)
     (let ((x (if (null? z)
		  d
		  (if (null? (cdr z))
		      (wow-cat-end z n t ***)
		      (error "alet: too many arguments" (cdr z))))))(declare (line 141))
                      (%alet (p ***) (nv *** (n x)) (bn ***) bd ***)))
    ((%alet "cat" (p ***) (nv ***) z ((n d t ***) . e) (bn ***) bd ***)
     (with ((x (gensym)))
       (let ((x (if (null? z)
                    d
                    (wow-cat! z n d t ***))))
         (declare (line 146))
         (%alet "cat" (p ***) (nv *** (n x)) z e (bn ***) bd ***))))
    ((%alet "cat" (p ***) (nv ***) z e (bn ***) bd ***)
     (with ((te (gensym)))
       (let ((te z))(declare (line 149))
            (%alet (p ***) (nv *** (e te)) (bn ***) bd ***))))
    ((%alet (p ***) (nv ***) ((key z a . e) bn ***) bd ***)
     (with ((y (gensym)))
       (let ((y z))(declare (line 152))
            (%alet "key" (p ***) (nv ***) y () () (a . e) () (bn ***) bd ***))))
    ((%alet "key" (p ***) (nv ***) z ()
	    (ndt ***) (((n k) d t ***) . e) (kk ***) (bn ***) bd ***)
     (%alet "key" (p ***) (nv ***) z ()
	    (ndt *** ((n k) d t ***)) e (kk *** k) (bn ***) bd ***))
    ((%alet "key" (p ***) (nv ***) z ()
	    (ndt ***) ((n d t ***) . e) (kk ***) (bn ***) bd ***)
     (%alet "key" (p ***) (nv ***) z ()
	    (ndt *** ((n 'n) d t ***)) e (kk *** 'n) (bn ***) bd ***))
    ((%alet "key" (p ***) (nv ***) z ()
	    (ndt nd ***) (:true . e) (kk k ***) (bn ***) bd ***)
     (locally
         (declare (line 170))
       (%alet "key" (p ***) (nv ***) z (:true)
              (ndt nd ***) e (kk k ***) (bn ***) bd ***)))
    ((%alet "key" (p ***) (nv ***) z ()
	    (ndt nd ***) (:false . e) (kk k ***) (bn ***) bd ***)
     (%alet "key" (p ***) (nv ***) z (:false)
	    (ndt nd ***) e (kk k ***) (bn ***) bd ***))
    ((%alet "key" (p ***) (nv ***) z (o ***)
	    (((n k) d t ***) ndt ***) e (kk ***) (bn ***) bd ***)
     (with ((x (gensym)))
       (let ((x (if (null? z)
                    d
                    (wow-key! z (o ***) (kk ***) (n k) d t ***))))
         (declare (line 174))
         (%alet "key" (p ***) (nv *** (n x)) z (o ***)
                (ndt ***) e (kk ***) (bn ***) bd ***))))
    ((%alet "key" (p ***) (nv ***) z (o ***) () () (kk ***) (bn ***) bd ***)
     (if (null? z)
	 (%alet (p ***) (nv ***) (bn ***) bd ***)
	 (error "alet: too many arguments" z)))
    ((%alet "key" (p ***) (nv ***) z (o ***) () e (kk ***) (bn ***) bd ***)
     (with ((te (gensym)))
       (let ((te z))
         (declare (line 182))
         (%alet (p ***) (nv *** (e te)) (bn ***) bd ***))))
    ((%alet (p ***) (nv ***) ((rec (n v) (nn vv) ***) bn ***) bd ***)
     (with ((t (gensym)))
       (%alet "rec" (p ***) (nv *** (n t)) ((n v t))
              ((nn vv) ***) (bn ***) bd ***)))
    ((%alet "rec" (p ***) (nv ***) (nvt ***) ((n v) (nn vv) ***)
	    (bn ***) bd ***)
     (with ((t (gensym)))
       (%alet "rec" (p ***) (nv *** (n t)) (nvt *** (n v t)) ((nn vv) ***)
              (bn ***) bd ***)))
    ((%alet "rec" (p ***) (nv ***) ((n v t) ***) () (bn ***) bd ***)
     (funcall
      (let ((n '<undefined>) ***)
        (declare (line 191))
        (multiple-value-bind (t ***) (values v ***)
          (declare (line 192))
          (set! n t) ***
          (mu n ***)))
      (lambda (t ***)
        (declare (line 195))
        (%alet (p ***) (nv ***) (bn ***) bd ***))))

    ((%alet (p ***) (nv ***) ((a b) bn ***) bd ***)
     (with ((t (gensym)))
       ((lambda (t) (declare (line 199))(%alet (p ***) (nv *** (a t)) (bn ***) bd ***)) b)))

    ((%alet (p ***) (nv ***) ((values a c) bn ***) bd ***)
     (with ((t (gensym)))
       ((lambda (t) (declare (line 203))(%alet (p ***) (nv *** (a t)) (bn ***) bd ***)) c)))
    ((%alet (p ***) (nv ***) ((values a b c ***) bn ***) bd ***)
     (with ((t (gensym)))
       (%alet "not" (p ***) (nv *** (a t)) (values t) (b c ***) (bn ***) bd ***)))
    ((%alet "not" (p ***) (nv ***) (values t ***) (a b c ***) (bn ***) bd ***)
     (with ((tn (gensym)))
       (%alet "not" (p ***) (nv *** (a tn)) (values t *** tn) (b c ***)
              (bn ***) bd ***)))
    ((%alet "not" (p ***) (nv ***) (values t ***) (z) (bn ***) bd ***)
     (call-with-values (lambda () (declare (line 212)) z)
                       (lambda (t ***) (declare (line 213))(%alet (p ***) (nv ***) (bn ***) bd ***))))

    ((%alet (p ***) (nv ***) ((a b c ***) bn ***) bd ***)
     (with ((t (gensym)))
       (%alet "not" (p ***) (nv *** (a t)) (t) (b c ***) (bn ***) bd ***)))
    ((%alet "not" (p ***) (nv ***) (t ***) (a b c ***) (bn ***) bd ***)
     (with ((tn (gensym)))
       (%alet "not" (p ***) (nv *** (a tn)) (t *** tn) (b c ***) (bn ***)
              bd ***)))
    ((%alet "not" (p ***) (nv ***) (t ***) (z) (bn ***) bd ***)
     (funcall z (lambda (t ***) (declare (line 223))(%alet (p ***) (nv ***) (bn ***) bd ***))))
    ((%alet (p ***) (nv ***) ((a) bn ***) bd ***)
     #|(with ((t (gensym)))
     (call-with-current-continuation
     (lambda (t) (declare (line 226))(%alet (p ***) (nv *** (a t)) (bn ***) bd ***))))|#
     (block a
       (macrolet ((a (val) `(return-from a ,val)))
         (declare (line 255))
         (%alet (p ***) (nv *** #|(a t)|#) (bn ***) bd ***))))
    ((%alet (p ***) (nv ***) ((a . b) bn ***) bd ***)
     (%alet "rot" (p ***) (nv ***) (a) b (bn ***) bd ***))
    ((%alet "rot" (p ***) (nv ***) (new-bn ***) (a . b) (bn ***) bd ***)
     (%alet "rot" (p ***) (nv ***) (new-bn *** a) b (bn ***) bd ***))
    ((%alet "rot" (p ***) (nv ***) (()) b (bn ***) bd ***)
     (%alet (b (p ***) (nv ***) (bn ***)) () () bd ***))
    ((%alet "rot" (p ***) (nv ***) (new-bn ***) b (bn ***) bd ***)
     (%alet (b (p ***) (nv ***) (bn ***)) () (new-bn ***) bd ***))
    ((%alet (p ***) (nv ***) (a b bn ***) bd ***)
     (with ((t (gensym)))
       (funcall b (lambda (&rest t) (declare (line 237))
                          (%alet (p ***) (nv *** (a t)) (bn ***) bd ***)))))))

;;; alet*
(define-syntax alet*
  (syntax-rules (opt cat key rec and values)
    ((alet* () bd ***)
     ((lambda () bd ***)))
    ((alet* ((() a b ***) bn ***) bd ***)
     ((lambda () a b *** (alet* (bn ***) bd ***))))
    ((alet* (((a) c) bn ***) bd ***)
     ((lambda (a) (alet* (bn ***) bd ***)) c))

    ((alet* (((values a) c) bn ***)  bd ***)
     ((lambda (a) (alet* (bn ***) bd ***)) c))

    ((alet* (((values . b) c) bn ***)  bd ***)
     (call-with-values (lambda () c)
                       (lambda* b (alet* (bn ***) bd ***))))
    ((alet* (((values . b) c d ***) bn ***) bd ***)
     (alet* "dot" (b c d ***) (bn ***) bd ***))
    ((alet* "dot" ((a . b) c d ***) (bn ***) bd ***)
     ((lambda (a) (declare (line 287))(alet* "dot" (b d ***) (bn ***) bd ***)) c))
    ((alet* "dot" (()) (bn ***) bd ***)
     (alet* (bn ***) bd ***))
    ((alet* "dot" (b c ***) (bn ***) bd ***)
     ((lambda (&rest b) (declare (line 291))(alet* (bn ***) bd ***)) c ***))

    ((alet* (((a . b) c) bn ***)  bd ***)
     (funcall c (lambda* (a . b) (alet* (bn ***) bd ***))))
    ((alet* (((a . b) c d ***) bn ***) bd ***)
     ((lambda (a) (declare (line 296))(alet* "dot" (b d ***) (bn ***) bd ***)) c))

    ((alet* ((and (n1 v1 t1 ***) (n2 v2 t2 ***) ***) bn ***) bd ***)
     (alet-and* ((n1 v1 t1 ***) (n2 v2 t2 ***) ***) (alet* (bn ***) bd ***)))
    ((alet* ((opt z a . e) bn ***) bd ***)
     (%alet-opt* z (a . e) (alet* (bn ***) bd ***)))
    ((alet* ((cat z a . e) bn ***)  bd ***)
     (let ((y z))
       (%alet-cat* y (a . e) (alet* (bn ***) bd ***))))
    ((alet* ((key z a . e) bn ***)  bd ***)
     (let ((y z))
       (%alet-key* y () () (a . e) () (alet* (bn ***) bd ***))))
    ((alet* ((rec (n1 v1) (n2 v2) ***) bn ***) bd ***)
     (alet-rec* ((n1 v1) (n2 v2) ***) (alet* (bn ***) bd ***)))

    ((alet* ((a b) bn ***) bd ***)
     ((lambda (a) (declare (line 312))(alet* (bn ***) bd ***)) b))

    ((alet* ((values a c) bn ***) bd ***)
     ((lambda (a) (declare (line 315))(alet* (bn ***) bd ***)) c))
    ((alet* ((values a b c ***) bn ***) bd ***)
     (alet* "not" (values a) (b c ***) (bn ***) bd ***))
    ((alet* "not" (values r ***) (a b c ***) (bn ***) bd ***)
     (alet* "not" (values r *** a) (b c ***) (bn ***) bd ***))
    ((alet* "not" (values r ***) (z) (bn ***) bd ***)
     (call-with-values (lambda () (declare (line 321))z)
                       (lambda* (r ***) (alet* (bn ***) bd ***))))

    ((alet* ((a b c ***) bn ***) bd ***)
     (alet* "not" (a) (b c ***) (bn ***) bd ***))
    ((alet* "not" (r ***) (a b c ***) (bn ***) bd ***)
     (alet* "not" (r *** a) (b c ***) (bn ***) bd ***))
    ((alet* "not" (r ***) (z) (bn ***) bd ***)
     (funcall z (lambda* (r ***) (alet* (bn ***) bd ***))))
    ((alet* ((a) bn ***) bd ***)
     #|(call-with-current-continuation
     (lambda (a) (alet* (bn ***)  bd ***)))|#
     (block a
       (macrolet ((a (val) `(return-from a ,val)))
         (declare (line 336))
         (alet* (bn ***) bd ***))))
    ((alet* ((a . b) bn ***) bd ***)
     (%alet* () () ((a . b) bn ***) bd ***))
    ((alet* (a b bn ***) bd ***)
     (funcall b (lambda (&rest a)(declare (line 335)) (alet* (bn ***) bd ***))))
    ((alet* var (bn ***) bd ***)
     (%alet* (var) () (bn ***) bd ***))))

(define-syntax %alet*
  (syntax-rules (opt cat key rec and values :true :false)
    ((%alet* (var) (n ***) () bd ***)
     (funcall
      (letrec ((var (lambda* (n ***) bd ***)))
	#|(function var)|#
        var) n ***)
     #|(labels ((var (&rest args)
     (apply (lambda* (n ***) bd ***) args)))
     (declare (line 346))
     (var n ***))|#)
    ((%alet* (var (bn ***)) (n ***) ()  bd ***)
     (funcall
      (letrec ((var (lambda* (n ***) (alet* (bn ***) bd ***))))
	#|(function var)|#
        var) n ***)
     #|(labels ((var (&rest args)
     (apply (lambda* (n ***) (alet* (bn ***) bd ***))
     args)))
     (var n ***))|#)
    ((%alet* (var (p ***) (nn ***) (bn ***)) (n ***) ()  bd ***)
     (funcall
      (letrec ((var (lambda* (n ***)
                             (%alet* (p ***) (nn *** n *** var) (bn ***)
                                     bd ***))))
	#|(function var)|#
        var) n ***)
     #|(labels ((var (&rest args)
     (apply (lambda* (n ***)
     (%alet* (p ***) (nn *** n *** var) (bn ***)
     bd ***))
     args)))
     (var n ***))|#)
    ((%alet* (p ***) (n ***) ((() a b ***) bn ***) bd ***)
     ((lambda () (declare (line 355))a b *** (%alet* (p ***) (n ***) (bn ***) bd ***))))
    ((%alet* (p ***) (n ***) (((a) c) bn ***) bd ***)
     ((lambda (a) (declare (line 357))(%alet* (p ***) (n *** a) (bn ***) bd ***)) c))

    ((%alet* (p ***) (n ***) (((values a) c) bn ***) bd ***)
     ((lambda (a) (declare (line 360))(%alet* (p ***) (n *** a) (bn ***) bd ***)) c))

    ((%alet* (p ***) (n ***) (((values . b) c) bn ***) bd ***)
     (%alet* "one" (p ***) (n ***) (values) (b c) (bn ***) bd ***))
    ((%alet* "one" (p ***) (n ***) (values r ***) ((a . b) c) (bn ***) bd ***)
     (%alet* "one" (p ***) (n *** a) (values r *** a) (b c) (bn ***) bd ***))
    ((%alet* "one" (p ***) (n ***) (values r ***) (() c) (bn ***) bd ***)
     (call-with-values (lambda ()(declare (line 367)) c)
                       (lambda* (r ***) (%alet* (p ***) (n ***) (bn ***) bd ***))))
    ((%alet* "one" (p ***) (n ***) (values r ***) (b c) (bn ***) bd ***)
     (call-with-values (lambda () (declare (line 370))c)
                       (lambda* (r *** . b) (%alet* (p ***) (n *** b) (bn ***) bd ***))))

    ((%alet* (p ***) (n ***) (((values . b) c d ***) bn ***) bd ***)
     (%alet* "dot" (p ***) (n ***) (b c d ***) (bn ***) bd ***))

    ((%alet* (p ***) (n ***) (((a . b) c) bn ***) bd ***)
     (%alet* "one" (p ***) (n *** a) (a) (b c) (bn ***) bd ***))
    ((%alet* "one" (p ***) (n ***) (r ***) ((a . b) c) (bn ***) bd ***)
     (%alet* "one" (p ***) (n *** a) (r *** a) (b c) (bn ***) bd ***))
    ((%alet* "one" (p ***) (n ***) (r ***) (() c) (bn ***) bd ***)
     (funcall c (lambda* (r ***) (%alet* (p ***) (n ***) (bn ***) bd ***))))
    ((%alet* "one" (p ***) (n ***) (r ***) (b c) (bn ***) bd ***)
     (funcall c (lambda* (r *** . b) (%alet* (p ***) (n *** b) (bn ***) bd ***))))

    ((%alet* (p ***) (n ***) (((a . b) c d ***) bn ***) bd ***)
     ((lambda (a) (declare (line 386))
              (%alet* "dot" (p ***) (n *** a) (b d ***) (bn ***) bd ***)) c))
    ((%alet* "dot" (p ***) (n ***) ((a . b) c d ***) (bn ***) bd ***)
     ((lambda (a)(declare (line 389))
              (%alet* "dot" (p ***) (n *** a) (b d ***) (bn ***) bd ***)) c))
    ((%alet* "dot" (p ***) (n ***) (()) (bn ***) bd ***)
     (%alet* (p ***) (n ***) (bn ***) bd ***))
    ((%alet* "dot" (p ***) (n ***) (b c ***) (bn ***) bd ***)
     ((lambda (&rest b)(declare (line 394)) (%alet* (p ***) (n *** b) (bn ***) bd ***)) c ***))

    ((%alet* (p ***) (n ***) ((and (n1 v1 t1 ***) (n2 v2 t2 ***) ***) bn ***)
	     bd ***)
     (alet-and* ((n1 v1 t1 ***) (n2 v2 t2 ***) ***)
		(%alet* (p ***) (n *** n1 n2 ***) (bn ***) bd ***)))
    ((%alet* (p ***) (n ***) ((opt z a . e) bn ***) bd ***)
     (%alet* "opt" (p ***) (n ***) z (a . e) (bn ***) bd ***))
    ((%alet* "opt" (p ***) (nn ***) z ((n d t ***)) (bn ***) bd ***)
     (let ((n (if (null? z)
		  d
		  (if (null? (cdr z))
		      (wow-opt n (car z) t ***)
		      (error "alet*: too many arguments" (cdr z))))))
       (declare (line 408))
       (%alet* (p ***) (nn *** n) (bn ***) bd ***)))
    ((%alet* "opt" (p ***) (nn ***) z ((n d t ***) . e) (bn ***) bd ***)
     (let ((y (if (null? z) z (cdr z)))
	   (n (if (null? z)
		  d
		  (wow-opt n (car z) t ***))))
       (declare (line 415))
       (%alet* "opt" (p ***) (nn *** n) y e (bn ***) bd ***)))
    ((%alet* "opt" (p ***) (nn ***) z e (bn ***) bd ***)
     (let ((e z))
       (declare (line 419))
       (%alet* (p ***) (nn *** e) (bn ***) bd ***)))
    ((%alet* (p ***) (nn ***) ((cat z a . e) bn ***) bd ***)
     (let ((y z))
       (declare (line 423))
       (%alet* "cat" (p ***) (nn ***) y (a . e) (bn ***) bd ***)))
    ((%alet* "cat" (p ***) (nn ***) z ((n d t ***)) (bn ***) bd ***)
     (let ((n (if (null? z)
		  d
		  (if (null? (cdr z))
		      (wow-cat-end z n t ***)
		      (error "alet*: too many arguments" (cdr z))))))
       (declare (line 431))
       (%alet* (p ***) (nn *** n) (bn ***) bd ***)))
    ((%alet* "cat" (p ***) (nn ***) z ((n d t ***) . e) (bn ***) bd ***)
     (let ((n (if (null? z)
		  d
		  (wow-cat! z n d t ***))))
       (declare (line 437))
       (%alet* "cat" (p ***) (nn *** n) z e (bn ***) bd ***)))
    ((%alet* "cat" (p ***) (nn ***) z e (bn ***) bd ***)
     (let ((e z))
       (declare (line 441))
       (%alet* (p ***) (nn *** e) (bn ***) bd ***)))
    ((%alet* (p ***) (m ***) ((key z a . e) bn ***) bd ***)
     (let ((y z))
       (declare (line 445))
       (%alet* "key" (p ***) (m ***) y () () (a . e) () (bn ***) bd ***)))
    ((%alet* "key" (p ***) (m ***) z ()
	     (ndt ***) (((n k) d t ***) . e) (kk ***) (bn ***) bd ***)
     (%alet* "key" (p ***) (m ***) z ()
	     (ndt *** ((n k) d t ***)) e (kk *** k) (bn ***) bd ***))
    ((%alet* "key" (p ***) (m ***) z ()
	     (ndt ***) ((n d t ***) . e) (kk ***) (bn ***) bd ***)
     (%alet* "key" (p ***) (m ***) z ()
	     (ndt *** ((n 'n) d t ***)) e (kk *** 'n) (bn ***) bd ***))
    ((%alet* "key" (p ***) (m ***) z ()
	     (ndt nd ***) (:true . e) (kk k ***) (bn ***) bd ***)
     (%alet* "key" (p ***) (m ***) z (:true)
	     (ndt nd ***) e (kk k ***) (bn ***) bd ***))
    ((%alet* "key" (p ***) (m ***) z ()
	     (ndt nd ***) (:false . e) (kk k ***) (bn ***) bd ***)
     (%alet* "key" (p ***) (m ***) z (:false)
	     (ndt nd ***) e (kk k ***) (bn ***) bd ***))
    ((%alet* "key" (p ***) (m ***) z (o ***)
	     (((n k) d t ***) ndt ***) e (kk ***) (bn ***) bd ***)
     (let ((n (if (null? z)
		  d
		  (wow-key! z (o ***) (kk ***) (n k) d t ***))))
       (declare (line 468))
       (%alet* "key" (p ***) (m *** n) z (o ***)
	       (ndt ***) e (kk ***) (bn ***) bd ***)))
    ((%alet* "key" (p ***) (m ***) z (o ***) () () (kk ***) (bn ***) bd ***)
     (if (null? z)
	 (%alet* (p ***) (m ***) (bn ***) bd ***)
	 (error "alet*: too many arguments" z)))
    ((%alet* "key" (p ***) (m ***) z (o ***) () e (kk ***) (bn ***) bd ***)
     (let ((e z))
       (declare (line 476))
       (%alet* (p ***) (m *** e) (bn ***) bd ***)))
    ((%alet* (p ***) (n ***) ((rec (n1 v1) (n2 v2) ***) bn ***) bd ***)
     (alet-rec* ((n1 v1) (n2 v2) ***)
		(%alet* (p ***) (n *** n1 n2 ***) (bn ***) bd ***)))

    ((%alet* (p ***) (n ***) ((a b) bn ***) bd ***)
     ((lambda (a)(declare (line 484)) (%alet* (p ***) (n *** a) (bn ***) bd ***)) b))

    ((%alet* (p ***) (n ***) ((values a c) bn ***) bd ***)
     ((lambda (a) (declare (line 487))(%alet* (p ***) (n *** a) (bn ***) bd ***)) c))
    ((%alet* (p ***) (n ***) ((values a b c ***) bn ***) bd ***)
     (%alet* "not" (p ***) (n *** a) (values a) (b c ***) (bn ***) bd ***))
    ((%alet* "not" (p ***) (n ***) (values r ***) (a b c ***) (bn ***) bd ***)
     (%alet* "not" (p ***) (n *** a) (values r *** a) (b c ***) (bn ***)
	     bd ***))
    ((%alet* "not" (p ***) (n ***) (values r ***) (z) (bn ***) bd ***)
     (call-with-values (lambda ()(declare (line 494)) z)
                       (lambda* (r ***) (%alet* (p ***) (n ***) (bn ***) bd ***))))

    ((%alet* (p ***) (n ***) ((a b c ***) bn ***) bd ***)
     (%alet* "not" (p ***) (n *** a) (a) (b c ***) (bn ***) bd ***))
    ((%alet* "not" (p ***) (n ***) (r ***) (a b c ***) (bn ***) bd ***)
     (%alet* "not" (p ***) (n *** a) (r *** a) (b c ***) (bn ***) bd ***))
    ((%alet* "not" (p ***) (n ***) (r ***) (z) (bn ***) bd ***)
     (funcall z (lambda* (r ***) (%alet* (p ***) (n ***) (bn ***) bd ***))))
    ((%alet* (p ***) (n ***) ((a) bn ***) bd ***)
     #|(call-with-current-continuation
     (lambda (a) (%alet* (p ***) (n *** a) (bn ***) bd ***)))|#
     (block a
       (macrolet ((a (val) `(return-from a ,val)))
         (declare (line 532))
         #|(%alet* (p ***) (n *** a) (bn ***) bd ***)|#
         (%alet* (p ***) (n *** a) (bn ***) bd ***))))
    ((%alet* (p ***) (n ***) ((a . b) bn ***) bd ***)
     (%alet* "rot" (p ***) (n ***) (a) b (bn ***) bd ***))
    ((%alet* "rot" (p ***) (n ***) (new-bn ***) (a . b) (bn ***) bd ***)
     (%alet* "rot" (p ***) (n ***) (new-bn *** a) b (bn ***) bd ***))
    ((%alet* "rot" () () (()) b (bn ***) bd ***)
     (%alet* (b (bn ***)) () () bd ***))
    ((%alet* "rot" (p ***) (n ***) (()) b (bn ***) bd ***)
     (%alet* (b (p ***) (n ***) (bn ***)) () () bd ***))
    ((%alet* "rot" () () (new-bn ***) b (bn ***) bd ***)
     (%alet* (b (bn ***)) () (new-bn ***) bd ***))
    ((%alet* "rot" (p ***) (n ***) (new-bn ***) b (bn ***) bd ***)
     (%alet* (b (p ***) (n ***) (bn ***)) () (new-bn ***) bd ***))
    ((%alet* (p ***) (n ***) (a b bn ***) bd ***)
     (funcall b (lambda (&rest a)(declare (line 519)) (%alet* (p ***) (n *** a) (bn ***) bd ***))))))

;;; auxiliaries
(define-syntax lambda*
  (syntax-rules ()
    ((lambda* (a . e) bd ***)
     (with ((ta (gensym)))
       (lambda* "star" (ta) (a) e bd ***)))
    ((lambda* "star" (t ***) (n ***) (a . e) bd ***)
     (with ((ta (gensym)))
       (lambda* "star" (t *** ta) (n *** a) e bd ***)))
    ((lambda* "star" (t ***) (n ***) () bd ***)
     (lambda (t ***)
       (declare (line 532))
       ;; mbe bug?
       (let*-mbe (n ***) (t ***)
                 (declare (line 533))
                 bd ***)))
    ((lambda* "star" (t ***) (n ***) e bd ***)
     (with ((te (gensym)))
       (lambda (t *** &rest te)
         (declare (line 536))
         ;;(let* ((n t) *** (e te))(declare (line 537)) bd ***)
         ;; mbe bug?
         (let*-mbe (n *** e) (t *** te)
                   (declare (line 537)) bd ***))))
    ((lambda* e bd ***)
     (lambda (&rest e)(declare (line 539)) bd ***))))

(define-syntax alet-and
  (syntax-rules ()
    ((alet-and ((n v t ***) ***) bd ***)
     (alet-and "and" () ((n v t ***) ***) bd ***))
    ((alet-and "and" (nt ***) ((n v) nvt ***) bd ***)
     (let ((t v))
       (declare (line 547))
       (and t (alet-and "and" (nt *** (n t)) (nvt ***) bd ***))))
    ((alet-and "and" (nt ***) ((n v t) nvt ***) bd ***)
     (let ((tt v))
       (declare (line 551))
       (and (let ((n tt))(declare (line 552)) t)
	    (alet-and "and" (nt *** (n tt)) (nvt ***) bd ***))))
    ((alet-and "and" ((n t) ***) () bd ***)
     ((lambda (n ***) (declare (line 555))bd ***) t ***))))

(define-syntax alet-and*
  (syntax-rules ()
    ((alet-and* () bd ***)
     ((lambda () (declare (line 560))bd ***)))
    ((alet-and* ((n v) nvt ***) bd ***)
     (let ((n v))
       (declare (line 563))
       (and n (alet-and* (nvt ***) bd ***))))
    ((alet-and* ((n v t) nvt ***) bd ***)
     (let ((n v))
       (declare (line 567))
       (and t (alet-and* (nvt ***) bd ***))))))

(define-syntax alet-rec
  (syntax-rules ()
    ((alet-rec ((n v) ***) bd ***)
     (alet-rec "rec" () ((n v) ***) bd ***))
    ((alet-rec "rec" (nvt ***) ((n v) nv ***) bd ***)
     (alet-rec "rec" (nvt *** (n v t)) (nv ***) bd ***))
    ((alet-rec "rec" ((n v t) ***) () bd ***)
     (let ((n '<undefined>) ***)
       (declare (line 578))
       (let ((t v) ***)
         (declare (line 580))
	 (set! n t) ***
	 ;;(let ()
	 ;;  bd ***))))))
	 bd ***)))))

(define-syntax alet-rec*
  (syntax-rules ()
    ((alet-rec* ((n v) ***) bd ***)
     (let* ((n '<undefined>) ***)
       (declare (line 590))
       (set! n v) ***
       ;;(let ()
       ;; bd ***)))))
       bd ***))))

(define-syntax wow-opt
  (syntax-rules ()
    ((wow-opt n v)
     v)
    ((wow-opt n v t)
     (let ((n v))
       (declare (line 602))
       (if t n (error "alet[*]: bad argument" n 'n 't))))
    ((wow-opt n v t ts)
     (let ((n v))
       (if t ts (error "alet[*]: bad argument" n 'n 't))))
    ((wow-opt n v t ts fs)
     (let ((n v))
       (declare (line 609))
       (if t ts fs)))))

(define-syntax wow-opt!
  (syntax-rules ()
    ((wow-opt! z n)
     (let ((n (car z)))
       (declare (line 616))
       (set! z (cdr z))
       n))
    ((wow-opt! z n t)
     (let ((n (car z)))
       (declare (line 621))
       (if t
	   (begin (set! z (cdr z)) n)
	   (error "alet[*]: bad argument" n 'n 't))))
    ((wow-opt! z n t ts)
     (let ((n (car z)))
       (declare (line 627))
       (if t
	   (begin (set! z (cdr z)) ts)
	   (error "alet[*]: bad argument" n 'n 't))))
    ((wow-opt! z n t ts fs)
     (let ((n (car z)))
       (declare (line 633))
       (if t
	   (begin (set! z (cdr z)) ts)
	   (begin (set! z (cdr z)) fs))))))

(define-syntax wow-cat-end
  (syntax-rules ()
    ((wow-cat-end z n)
     (car z))
    ((wow-cat-end z n t)
     (let ((n (car z)))
       (declare (line 644))
       (if t n (error "alet[*]: too many argument" z))))
    ((wow-cat-end z n t ts)
     (let ((n (car z)))
       (declare (line 648))
       (if t ts (error "alet[*]: too many argument" z))))
    ((wow-cat-end z n t ts fs)
     (let ((n (car z)))
       (declare (line 652))
       (if t ts fs)))))

(define-syntax wow-cat
  (syntax-rules ()
    ((wow-cat z n d)
     z)
    ((wow-cat z n d t)
     (with ((lp (gensym)))
       (let ((n (car z)))
         (declare (line 661))
         (if t
             z
             (let lp ((head (list n)) (tail (cdr z)))
                  (if (null? tail)
                      (cons d z)
                      (let ((n (car tail)))
                        (declare (line 668))
                        (if t
                            (cons n (append (reverse head) (cdr tail)))
                            (lp (cons n head) (cdr tail))))))))))
    ((wow-cat z n d t ts)
     (with ((lp (gensym)))
       (let ((n (car z)))
         (declare (line 674))
         (if t
             (cons ts (cdr z))
             (let lp ((head (list n)) (tail (cdr z)))
                  (if (null? tail)
                      (cons d z)
                      (let ((n (car tail)))
                        (declare (line 681))
                        (if t
                            (cons ts (append (reverse head) (cdr tail)))
                            (lp (cons n head) (cdr tail))))))))))
    ((wow-cat z n d t ts fs)
     (let ((n (car z)))
       (declare (line 687))
       (if t
	   (cons ts (cdr z))
	   (cons fs (cdr z)))))))

(define-syntax wow-cat!
  (syntax-rules ()
    ((wow-cat! z n d)
     (let ((n (car z)))
       (declare (line 696))
       (set! z (cdr z))
       n))
    ((wow-cat! z n d t)
     (with ((lp (gensym)))
       (let ((n (car z)))
         (if t
             (begin (set! z (cdr z)) n)
             (let lp ((head (list n)) (tail (cdr z)))
                  (if (null? tail)
                      d
                      (let ((n (car tail)))
                        (declare (line 707))
                        (if t
                            (begin (set! z (append (reverse head) (cdr tail))) n)
                            (lp (cons n head) (cdr tail))))))))))
    ((wow-cat! z n d t ts)
     (with ((lp (gensym)))
       (let ((n (car z)))
         (declare (line 713))
         (if t
             (begin (set! z (cdr z)) ts)
             (let lp ((head (list n)) (tail (cdr z)))
                  (if (null? tail)
                      d
                      (let ((n (car tail)))
                        (declare (line 720))
                        (if t
                            (begin (set! z (append (reverse head) (cdr tail))) ts)
                            (lp (cons n head) (cdr tail))))))))))
    ((wow-cat! z n d t ts fs)
     (let ((n (car z)))
       (declare (line 726))
       (if t
	   (begin (set! z (cdr z)) ts)
	   (begin (set! z (cdr z)) fs))))))

(define-syntax wow-key!
  (syntax-rules (:false :true)
    ((wow-key! z () (kk ***) (n key) d)
     (with ((x (gensym))
            (y (gensym))
            (lp (gensym)))
       (let ((x (car z))
             (y (cdr z)))
         (declare (line 738))
         (if (null? y)
             d
             (if (equal? key x)
                 (begin (set! z (cdr y)) (car y))
                 (let lp ((head (list (car y) x)) (tail (cdr y)))
                      (if (null? tail)
                          d
                          (let ((x (car tail))
                                (y (cdr tail)))
                            (declare (line 748))
                            (if (null? y)
                                d
                                (if (equal? key x)
                                    (begin (set! z (append (reverse head) (cdr y)))
                                           (car y))
                                    (lp (cons (car y) (cons x head))
                                        (cdr y))))))))))))
    ((wow-key! z (:false) (kk ***) (n key) d)
     (with ((x (gensym))
            (y (gensym))
            (lk (gensym))
            (lp (gensym)))
       (let ((x (car z))
             (y (cdr z)))
         (declare (line 762))
         (if (null? y)
             d
             (if (equal? key x)
                 (begin (set! z (cdr y)) (car y))
                 (let ((lk (list kk ***)))
                   (declare (line 768))
                   (if (not (member x lk))
                       d
                       (let lp ((head (list (car y) x)) (tail (cdr y)))
                            (if (null? tail)
                                d
                                (let ((x (car tail))
                                      (y (cdr tail)))
                                  (declare (line 776))
                                  (if (null? y)
                                      d
                                      (if (equal? key x)
                                          (begin (set! z (append (reverse head)
                                                                 (cdr y)))
                                                 (car y))
                                          (if (not (member x lk))
                                              d
                                              (lp (cons (car y) (cons x head))
                                                  (cdr y)))))))))))))))
    ((wow-key! z (:true) (kk ***) (n key) d)
     (with ((x (gensym))
            (y (gensym))
            (lk (gensym)))
       (let ((x (car z))
             (y (cdr z))
             (lk (gensym))
             (lp (gensym)))
         (declare (line 794))
         (if (null? y)
             d
             (if (equal? key x)
                 (begin (set! z (cdr y)) (car y))
                 (let* ((lk (list kk ***))
                        (m (member x lk)))
                   (declare (line 801))
                   (let lp ((head (if m (list (car y) x) (list x)))
                            (tail (if m (cdr y) y)))
                        (if (null? tail)
                            d
                            (let ((x (car tail))
                                  (y (cdr tail)))
                              (declare (line 808))
                              (if (null? y)
                                  d
                                  (if (equal? key x)
                                      (begin (set! z (append (reverse head)
                                                             (cdr y)))
                                             (car y))
                                      (let ((m (member x lk)))
                                        (declare (line 816))
                                        (lp (if m
                                                (cons (car y) (cons x head))
                                                (cons x head))
                                            (if m (cdr y) y))))))))))))))
    ((wow-key! z () (kk ***) (n key) d t)
     (with ((x (gensym))
            (y (gensym))
            (lp (gensym)))
       (let ((x (car z))
             (y (cdr z)))
         (declare (line 826))
         (if (null? y)
             d
             (if (equal? key x)
                 (let ((n (car y)))
                   (declare (line 831))
                   (if t
                       (begin (set! z (cdr y)) n)
                       (error "alet[*]: bad argument" n 'n 't)))
                 (let lp ((head (list (car y) x)) (tail (cdr y)))
                      (if (null? tail)
                          d
                          (let ((x (car tail))
                                (y (cdr tail)))
                            (declare (line 840))
                            (if (null? y)
                                d
                                (if (equal? key x)
                                    (let ((n (car y)))
                                      (declare (line 845))
                                      (if t
                                          (begin (set! z (append (reverse head)
                                                                 (cdr y)))
                                                 n)
                                          (error "alet[*]: bad argument"
                                                 n 'n 't)))
                                    (lp (cons (car y) (cons x head))
                                        (cdr y))))))))))))
    ((wow-key! z (:false) (kk ***) (n key) d t)
     (with ((x (gensym))
            (y (gensym))
            (lk (gensym))
            (lp (gensym)))
       (let ((x (car z))
             (y (cdr z)))
         (declare (line 860))
         (if (null? y)
             d
             (if (equal? key x)
                 (let ((n (car y)))
                   (declare (line 865))
                   (if t
                       (begin (set! z (cdr y)) n)
                       (error "alet[*]: bad argument" n 'n 't)))
                 (let ((lk (list kk ***)))
                   (declare (line 870))
                   (if (not (member x lk))
                       d
                       (let lp ((head (list (car y) x)) (tail (cdr y)))
                            (if (null? tail)
                                d
                                (let ((x (car tail))
                                      (y (cdr tail)))
                                  (declare (line 878))
                                  (if (null? y)
                                      d
                                      (if (equal? key x)
                                          (let ((n (car y)))
                                            (declare (line 883))
                                            (if t
                                                (begin
                                                 (set! z (append (reverse head)
                                                                 (cdr y)))
                                                 n)
                                                (error "alet[*]: bad argument"
                                                       n 'n 't)))
                                          (if (not (member x lk))
                                              d
                                              (lp (cons (car y) (cons x head))
                                                  (cdr y)))))))))))))))
    ((wow-key! z (:true) (kk ***) (n key) d t)
     (with ((x (gensym))
            (y (gensym))
            (lk (gensym))
            (lp (gensym)))
       (let ((x (car z))
             (y (cdr z)))
         (declare (line 901))
         (if (null? y)
             d
             (if (equal? key x)
                 (let ((n (car y)))
                   (declare (line 906))
                   (if t
                       (begin (set! z (cdr y)) n)
                       (error "alet[*]: bad argument" n 'n 't)))
                 (let* ((lk (list kk ***))
                        (m (member x lk)))
                   (declare (line 912))
                   (let lp ((head (if m (list (car y) x) (list x)))
                            (tail (if m (cdr y) y)))
                        (if (null? tail)
                            d
                            (let ((x (car tail))
                                  (y (cdr tail)))
                              (declare (line 919))
                              (if (null? y)
                                  d
                                  (if (equal? key x)
                                      (let ((n (car y)))
                                        (declare (line 924))
                                        (if t
                                            (begin (set! z (append (reverse head)
                                                                   (cdr y)))
                                                   n)
                                            (error "alet[*]: bad argument"
                                                   n 'n 't)))
                                      (let ((m (member x lk)))
                                        (declare (line 932))
                                        (lp (if m
                                                (cons (car y) (cons x head))
                                                (cons x head))
                                            (if m (cdr y) y))))))))))))))
    ((wow-key! z () (kk ***) (n key) d t ts)
     (with ((x (gensym))
            (y (gensym))
            (lp (gensym)))
       (let ((x (car z))
             (y (cdr z)))
         (declare (line 942))
         (if (null? y)
             d
             (if (equal? key x)
                 (let ((n (car y)))
                   (declare (line 947))
                   (if t
                       (begin (set! z (cdr y)) ts)
                       (error "alet[*]: bad argument" n 'n 't)))
                 (let lp ((head (list (car y) x)) (tail (cdr y)))
                      (if (null? tail)
                          d
                          (let ((x (car tail))
                                (y (cdr tail)))
                            (declare (line 956))
                            (if (null? y)
                                d
                                (if (equal? key x)
                                    (let ((n (car y)))
                                      (declare (line 961))
                                      (if t
                                          (begin (set! z (append (reverse head)
                                                                 (cdr y)))
                                                 ts)
                                          (error "alet[*]: bad argument"
                                                 n 'n 't)))
                                    (lp (cons (car y) (cons x head))
                                        (cdr y))))))))))))
    ((wow-key! z (:false) (kk ***) (n key) d t ts)
     (with ((x (gensym))
            (y (gensym))
            (lk (gensym))
            (lp (gensym)))
       (let ((x (car z))
             (y (cdr z)))
         (declare (line 976))
         (if (null? y)
             d
             (if (equal? key x)
                 (let ((n (car y)))
                   (declare (line 981))
                   (if t
                       (begin (set! z (cdr y)) ts)
                       (error "alet[*]: bad argument" n 'n 't)))
                 (let ((lk (list kk ***)))
                   (if (not (member x lk))
                       d
                       (let lp ((head (list (car y) x)) (tail (cdr y)))
                            (if (null? tail)
                                d
                                (let ((x (car tail))
                                      (y (cdr tail)))
                                  (declare (line 993))
                                  (if (null? y)
                                      d
                                      (if (equal? key x)
                                          (let ((n (car y)))
                                            (declare (line 998))
                                            (if t
                                                (begin
                                                 (set! z (append (reverse head)
                                                                 (cdr y)))
                                                 ts)
                                                (error "alet[*]: bad argument"
                                                       n 'n 't)))
                                          (if (not (member x lk))
                                              d
                                              (lp (cons (car y) (cons x head))
                                                  (cdr y)))))))))))))))
    ((wow-key! z (:true) (kk ***) (n key) d t ts)
     (with ((x (gensym))
            (y (gensym))
            (lk (gensym))
            (lp (gensym)))
       (let ((x (car z))
             (y (cdr z)))
         (declare (line 1016))
         (if (null? y)
             d
             (if (equal? key x)
                 (let ((n (car y)))
                   (declare (line 1021))
                   (if t
                       (begin (set! z (cdr y)) ts)
                       (error "alet[*]: bad argument" n 'n 't)))
                 (let* ((lk (list kk ***))
                        (m (member x lk)))
                   (declare (line 1027))
                   (let lp ((head (if m (list (car y) x) (list x)))
                            (tail (if m (cdr y) y)))
                        (if (null? tail)
                            d
                            (let ((x (car tail))
                                  (y (cdr tail)))
                              (declare (line 1034))
                              (if (null? y)
                                  d
                                  (if (equal? key x)
                                      (let ((n (car y)))
                                        (declare (line 1039))
                                        (if t
                                            (begin (set! z (append (reverse head)
                                                                   (cdr y)))
                                                   ts)
                                            (error "alet[*]: bad argument"
                                                   n 'n 't)))
                                      (let ((m (member x lk)))
                                        (declare (line 1047))
                                        (lp (if m
                                                (cons (car y) (cons x head))
                                                (cons x head))
                                            (if m (cdr y) y))))))))))))))
    ((wow-key! z () (kk ***) (n key) d t ts fs)
     (with ((x (gensym))
            (y (gensym))
            (lp (gensym)))
       (let ((x (car z))
             (y (cdr z)))
         (declare (line 1057))
         (if (null? y)
             d
             (if (equal? key x)
                 (let ((n (car y)))
                   (declare (line 1062))
                   (if t
                       (begin (set! z (cdr y)) ts)
                       (begin (set! z (cdr y)) fs)))
                 (let lp ((head (list (car y) x)) (tail (cdr y)))
                      (if (null? tail)
                          d
                          (let ((x (car tail))
                                (y (cdr tail)))
                            (declare (line 1071))
                            (if (null? y)
                                d
                                (if (equal? key x)
                                    (let ((n (car y)))
                                      (declare (line 1076))
                                      (if t
                                          (begin (set! z (append (reverse head)
                                                                 (cdr y)))
                                                 ts)
                                          (begin (set! z (append (reverse head)
                                                                 (cdr y)))
                                                 fs)))
                                    (lp (cons (car y) (cons x head))
                                        (cdr y))))))))))))
    ((wow-key! z (:false) (kk ***) (n key) d t ts fs)
     (with ((x (gensym))
            (y (gensym))
            (lk (gensym))
            (lp (gensym)))
       (let ((x (car z))
             (y (cdr z)))
         (declare (line 1092))
         (if (null? y)
             d
             (if (equal? key x)
                 (let ((n (car y)))
                   (declare (line 1097))
                   (if t
                       (begin (set! z (cdr y)) ts)
                       (begin (set! z (cdr y)) fs)))
                 (let ((lk (list kk ***)))
                   (declare (line 1102))
                   (if (not (member x lk))
                       d
                       (let lp ((head (list (car y) x)) (tail (cdr y)))
                            (if (null? tail)
                                d
                                (let ((x (car tail))
                                      (y (cdr tail)))
                                  (declare (line 1110))
                                  (if (null? y)
                                      d
                                      (if (equal? key x)
                                          (let ((n (car y)))
                                            (declare (line 1115))
                                            (if t
                                                (begin
                                                 (set! z (append (reverse head)
                                                                 (cdr y)))
                                                 ts)
                                                (begin
                                                 (set! z (append (reverse head)
                                                                 (cdr y)))
                                                 fs)))
                                          (if (not (member x lk))
                                              d
                                              (lp (cons (car y) (cons x head))
                                                  (cdr y)))))))))))))))
    ((wow-key! z (:true) (kk ***) (n key) d t ts fs)
     (with ((x (gensym))
            (y (gensym))
            (lk (gensym))
            (lp (gensym)))
       (let ((x (car z))
             (y (cdr z)))
         (declare (line 1135))
         (if (null? y)
             d
             (if (equal? key x)
                 (let ((n (car y)))
                   (declare (line 1140))
                   (if t
                       (begin (set! z (cdr y)) ts)
                       (begin (set! z (cdr y)) fs)))
                 (let* ((lk (list kk ***))
                        (m (member x lk)))
                   (let lp ((head (if m (list (car y) x) (list x)))
                            (tail (if m (cdr y) y)))
                        (if (null? tail)
                            d
                            (let ((x (car tail))
                                  (y (cdr tail)))
                              (declare (line 1152))
                              (if (null? y)
                                  d
                                  (if (equal? key x)
                                      (let ((n (car y)))
                                        (declare (line 1157))
                                        (if t
                                            (begin (set! z (append (reverse head)
                                                                   (cdr y)))
                                                   ts)
                                            (begin (set! z (append (reverse head)
                                                                   (cdr y)))
                                                   fs)))
                                      (let ((m (member x lk)))
                                        (declare (line 1166))
                                        (lp (if m
                                                (cons (car y) (cons x head))
                                                (cons x head))
                                            (if m (cdr y) y))))))))))))))))

(define-syntax alet-opt*
  (syntax-rules ()
    ((alet-opt* z (a . e) bd ***)
     (with ((y (gensym)))
       (let ((y z))
         (declare (line 1177))
         (%alet-opt* y (a . e) bd ***))))))
(define-syntax %alet-opt*
  (syntax-rules ()
    ((%alet-opt* z ((n d t ***)) bd ***)
     (let ((n (if (null? z)
		  d
		  (if (null? (cdr z))
		      (wow-opt n (car z) t ***)
		      (error "alet*: too many arguments" (cdr z))))))
       (declare (line 1187))
       bd ***))
    ((%alet-opt* z ((n d t ***) . e)  bd ***)
     (let ((y (if (null? z) z (cdr z)))
	   (n (if (null? z)
		  d
		  (wow-opt n (car z) t ***))))
       (declare (line 1194))
       (%alet-opt* y e bd ***)))
    ((%alet-opt* z e bd ***)
     (let ((e z)) (declare (line 1197))bd ***))))
;; (define-syntax %alet-opt*
;;   (syntax-rules ()
;;     ((%alet-opt* z ((n d t ***)) bd ***)
;;      (let ((n (if (null? z)
;; 		  d
;; 		  (if (null? (cdr z))
;; 		      (wow-opt n (car z) t ***)
;; 		      (error "alet*: too many arguments" (cdr z))))))
;;        bd ***))
;;     ((%alet-opt* z ((n d t ***) . e)  bd ***)
;;      (let ((n (if (null? z)
;; 		  d
;; 		  (wow-opt! z n t ***))))
;;        (%alet-opt* z e bd ***)))
;;     ((%alet-opt* z e bd ***)
;;      (let ((e z)) bd ***))))
;; (define-syntax %alet-opt*
;;   (syntax-rules ()
;;     ((%alet-opt* z (ndt ***) (a . e) bd ***)
;;      (%alet-opt* z (ndt *** a) e bd ***))
;;     ((%alet-opt* z ((n d t ***) (nn dd tt ***) ***) () bd ***)
;;      (if (null? z)
;; 	 (let* ((n d) (nn dd) ***) bd ***)
;; 	 (let ((y (cdr z))
;; 	       (n (wow-opt n (car z) t ***)))
;; 	   (%alet-opt* y ((nn dd tt ***) ***) () bd ***))))
;;     ((%alet-opt* z () () bd ***)
;;      (if (null? z)
;; 	 (let () bd ***)
;; 	 (error "alet*: too many arguments" z)))
;;     ((%alet-opt* z  ((n d t ***) (nn dd tt ***) ***) e bd ***)
;;      (if (null? z)
;; 	 (let* ((n d) (nn dd) *** (e z)) bd ***)
;; 	 (let ((y (cdr z))
;; 	       (n (wow-opt n (car z) t ***)))
;; 	   (%alet-opt* y ((nn dd tt ***) ***) e bd ***))))
;;     ((%alet-opt* z () e bd ***)
;;      (let ((e z)) bd ***))))

(define-syntax alet-cat*
  (syntax-rules ()
    ((alet-cat* z (a . e) bd ***)
     (with ((y (gensym)))
       (let ((y z))
         (declare (line 1242))
         (%alet-cat* y (a . e) bd ***))))))
;; (define-syntax %alet-cat*
;;   (syntax-rules ()
;;     ((%alet-cat* z ((n d t ***)) bd ***)
;;      (let ((n (if (null? z)
;; 		  d
;; 		  (if (null? (cdr z))
;; 		      (wow-cat-end z n t ***)
;; 		      (error "alet*: too many arguments" (cdr z))))))
;;        bd ***))
;;     ((%alet-cat* z ((n d t ***) . e) bd ***)
;;      (let* ((w (if (null? z)
;; 		   (cons d z)
;; 		   (wow-cat z n d t ***)))
;; 	    (n (car w))
;; 	    (y (cdr w)))
;;        (%alet-cat* y e bd ***)))
;;     ((%alet-cat* z e bd ***)
;;      (let ((e z)) bd ***))))
(define-syntax %alet-cat*
  (syntax-rules ()
    ((%alet-cat* z ((n d t ***)) bd ***)
     (let ((n (if (null? z)
		  d
		  (if (null? (cdr z))
		      (wow-cat-end z n t ***)
		      (error "alet*: too many arguments" (cdr z))))))
       (declare (line 1270))
       bd ***))
    ((%alet-cat* z ((n d t ***) . e) bd ***)
     (let ((n (if (null? z)
		  d
		  (wow-cat! z n d t ***))))
       (declare (line 1276))
       (%alet-cat* z e bd ***)))
    ((%alet-cat* z e bd ***)
     (let ((e z)) (declare (line 1279))bd ***))))
;; (define-syntax %alet-cat*
;;   (syntax-rules ()
;;     ((%alet-cat* z (ndt ***) (a . e) bd ***)
;;      (%alet-cat* z (ndt *** a) e bd ***))
;;     ((%alet-cat* z ((n d t ***) (nn dd tt ***) ***) () bd ***)
;;      (if (null? z)
;; 	 (let* ((n d) (nn dd) ***) bd ***)
;; 	 (let* ((w (wow-cat z n d t ***))
;; 		(n (car w))
;; 		(y (cdr w)))
;; 	   (%alet-cat* y ((nn dd tt ***) ***) () bd ***))))
;;     ((%alet-cat* z () () bd ***)
;;      (if (null? z)
;; 	 (let () bd ***)
;; 	 (error "alet*: too many arguments" z)))
;;     ((%alet-cat* z  ((n d t ***) (nn dd tt ***) ***) e bd ***)
;;      (if (null? z)
;; 	 (let* ((n d) (nn dd) *** (e z)) bd ***)
;; 	 (let* ((w (wow-cat z n d t ***))
;; 		(n (car w))
;; 		(y (cdr w)))
;; 	   (%alet-cat* y ((nn dd tt ***) ***) e bd ***))))
;;     ((%alet-cat* z () e bd ***)
;;      (let ((e z)) bd ***))))

(define-syntax alet-key*
  (syntax-rules ()
    ((alet-key* z (a . e) bd ***)
     (with ((y (gensym)))
       (let ((y z))
         (declare (line 1310))
         (%alet-key* y () () (a . e) () bd ***))))))
(define-syntax %alet-key*
  (syntax-rules (:true :false)
    ((%alet-key* z () (ndt ***) (((n k) d t ***) . e) (kk ***) bd ***)
     (%alet-key* z () (ndt *** ((n k) d t ***)) e (kk *** k) bd ***))
    ((%alet-key* z () (ndt ***) ((n d t ***) . e) (kk ***) bd ***)
     (%alet-key* z () (ndt *** ((n 'n) d t ***)) e (kk *** 'n) bd ***))
    ((%alet-key* z () (ndt nd ***) (:false . e) (kk k ***) bd ***)
     (%alet-key* z (:false) (ndt nd ***) e (kk k ***) bd ***))
    ((%alet-key* z () (ndt nd ***) (:true . e) (kk k ***) bd ***)
     (%alet-key* z (:true) (ndt nd ***) e (kk k ***) bd ***))

    ((%alet-key* z (o ***) (((n k) d t ***) ndt ***) e (kk ***) bd ***)
     (let ((n (if (null? z)
		  d
		  (wow-key! z (o ***) (kk ***) (n k) d t ***))))
       (declare (line 1327))
       (%alet-key* z (o ***) (ndt ***) e (kk ***) bd ***)))
    ((%alet-key* z (o ***) () () (kk ***) bd ***)
     (if (null? z)
	 (let () (declare (line 1331))bd ***)
	 (error "alet*: too many arguments" z)))
    ((%alet-key* z (o ***) () e (kk ***) bd ***)
     (let ((e z)) (declare (line 1334))bd ***))))

